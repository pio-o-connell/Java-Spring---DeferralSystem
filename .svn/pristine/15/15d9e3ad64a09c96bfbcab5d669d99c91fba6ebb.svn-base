package com.grouptwo.mvc;

import java.util.List;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.PropertySource;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;

import com.github.springtestdbunit.DbUnitTestExecutionListener;
import com.github.springtestdbunit.annotation.DatabaseOperation;
import com.github.springtestdbunit.annotation.DatabaseSetup;
import com.grouptwo.domain.Programme;
import com.grouptwo.repository.ProgrammeJdbcDaoSupport;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration({ "classpath:configuration.xml" })
@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class,
		DbUnitTestExecutionListener.class })


public class ProgrammeTest  {//extends FirefoxDriver
	@Autowired
	ApplicationContext autoWireContext;
	ProgrammeJdbcDaoSupport programmeJdbcDaoSupport;
	ProgrammeJdbcDaoSupport semesterDaoSupport;
	
	
	
  private WebDriver driver;
  private String baseUrl;
  private boolean acceptNextAlert = true;
  private StringBuffer verificationErrors = new StringBuffer();

  @Before
  public void setUp() throws Exception {
    driver = new FirefoxDriver();
    driver.manage().window().maximize();
    baseUrl = "http://localhost:8080/";
    driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
    programmeJdbcDaoSupport = (ProgrammeJdbcDaoSupport) autoWireContext.getBean("programmeJdbcDaoSupport");
  }
  
 /* @Override
  public WebElement findElement(By by) {
      try {
          Thread.sleep(500);
      } catch (InterruptedException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
      }
      return by.findElement((SearchContext) this);
  }*/

  

  @Test
  @DatabaseSetup(value = "classpath:databaseEntries.xml", type = DatabaseOperation.CLEAN_INSERT)
  public void testCreateNewProgrammeTestCase() throws Exception {
	  driver.get(baseUrl + "/SpringWebProject/home");
	    driver.findElement(By.linkText("Menu Options")).click();
	    driver.findElement(By.partialLinkText("Add New")).click();
	    driver.findElement(By.linkText("Programme")).click();
	    driver.findElement(By.id("programmeId")).clear();
	    driver.findElement(By.id("programmeId")).sendKeys("KCLDC_Y6");
	    
	    WebElement programmeId= driver.findElement(By.id("programmeId"));
	    Assert.assertEquals(true, programmeId.isDisplayed());
	    Assert.assertEquals(true,isElementPresent(By.id("programmeId")));
	    
	    new Select(driver.findElement(By.id("coordinatorId"))).selectByVisibleText("L002");
	    driver.findElement(By.id("numYears")).clear();
	    driver.findElement(By.id("numYears")).sendKeys("4");
	    driver.findElement(By.id("progYear")).clear();
	    driver.findElement(By.id("progYear")).sendKeys("4");
	    driver.findElement(By.cssSelector("input[type=\"submit\"]")).click();
	    
	    WebDriverWait wait = new WebDriverWait(driver, 40);
	    WebElement element = wait.until(ExpectedConditions.elementToBeClickable(By.id("myTable")));

	    
	    List<Programme> programmes=programmeJdbcDaoSupport.listProgrammes();
		assertEquals(6,programmes.size());	
		
		assertEquals( "KCLDC_Y4",programmes.get(0).getProgrammeId());
		assertEquals( "KCLDC_Y6_Y1",programmes.get(1).getProgrammeId());
		assertEquals( "KCLDC_Y6_Y2",programmes.get(2).getProgrammeId());
		assertEquals( "KCLDC_Y6_Y3",programmes.get(3).getProgrammeId());
		assertEquals( "KCLDC_Y6_Y4",programmes.get(4).getProgrammeId());
		assertEquals( "KCMSD_Y5",programmes.get(5).getProgrammeId());
		
		/*driver.findElement(By.xpath("(//a[contains(text(),'Delete')])[2]")).click();
		
		WebDriverWait wait1 = new WebDriverWait(driver, 10);
		 WebElement elementa = wait1.until(ExpectedConditions.elementToBeClickable(By.id("myTable")));
		
		List<Programme> programmesAfterDelete=programmeJdbcDaoSupport.listProgrammes();
		assertEquals(5,programmesAfterDelete.size());*/
		  
  
  }
  
  @Test
  @DatabaseSetup(value = "classpath:databaseEntries.xml", type = DatabaseOperation.CLEAN_INSERT)
  public void testDeleteProgrammeTestCase() throws Exception {
	  driver.get(baseUrl + "/SpringWebProject/home");
	    driver.findElement(By.linkText("Menu Options")).click();
	    driver.findElement(By.partialLinkText("List All")).click();
	    driver.findElement(By.linkText("Programmes")).click();
	    driver.findElement(By.linkText("Delete")).click();
		
		try {
			WebDriverWait wait1 = new WebDriverWait(driver,5);
			 //WebElement elementa = wait1.until(ExpectedConditions.elementToBeClickable(By.id("myTable")));
			WebElement elementa = wait1.until(ExpectedConditions.visibilityOfElementLocated(By.id("myTable")));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
		}
		
		List<Programme> programmesAfterDelete=programmeJdbcDaoSupport.listProgrammes();
		assertEquals(1,programmesAfterDelete.size());
  }
  
  @Test
  @DatabaseSetup(value = "classpath:databaseEntries.xml", type = DatabaseOperation.CLEAN_INSERT)
  public void testModifyProgrammeTestCase() throws Exception {
    driver.get(baseUrl + "/SpringWebProject/home");
    driver.findElement(By.linkText("Menu Options")).click();
    driver.findElement(By.partialLinkText("List All")).click();
    driver.findElement(By.linkText("Programmes")).click();
    driver.findElement(By.linkText("Modify")).click();

    new Select(driver.findElement(By.id("coordinatorId"))).selectByVisibleText("L001");
    driver.findElement(By.id("modify")).click();
    
    try {
		WebDriverWait wait1 = new WebDriverWait(driver, 5);
		WebElement elementa = wait1.until(ExpectedConditions.visibilityOfElementLocated(By.id("myTable")));
		// WebElement elementa = wait1.until(ExpectedConditions.elementToBeClickable(By.id("myTable")));
	} catch (Exception e) {
		// TODO Auto-generated catch block
		//e.printStackTrace();
	}
	 
	/* Programme modifiedProgramme = programmeJdbcDaoSupport.getProgramme("KCLDC_Y4");
	 assertEquals("L001",modifiedProgramme.getCoordinatorId());*/
	 
	 List<Programme> programmesAfterModify=programmeJdbcDaoSupport.listProgrammes();
	 assertEquals( 1,programmesAfterModify.size());
	 assertEquals( "L001",programmesAfterModify.get(0).getCoordinatorId());
  }

 /* @After
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
    
  }*/

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}
